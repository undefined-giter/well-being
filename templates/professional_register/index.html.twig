{% extends 'base.html.twig' %}

{% block title %}Professional Registration{% endblock %}

{% block map_head %}
{# block map #}
<script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
<script>
let map;
let marker;
let geocoder;
let responseDiv;
let response;

function initMap() {
    map = new google.maps.Map(document.getElementById("map"), {
    zoom: 8,
    center: { lat: 45.7640, lng: 4.8357 },
    mapTypeControl: false,
    });
    geocoder = new google.maps.Geocoder();

    const inputText = document.createElement("input");

    inputText.type = "text";
    inputText.placeholder = "Enter a location";

    const submitButton = document.createElement("input");

    submitButton.type = "button";
    submitButton.value = "Find your place";
    submitButton.classList.add("button", "button-primary");

    response = document.createElement("pre");
    response.id = "response";
    response.innerText = "";
    responseDiv = document.createElement("div");
    responseDiv.id = "response-container";
    responseDiv.appendChild(response);

    map.controls[google.maps.ControlPosition.TOP_LEFT].push(inputText);
    map.controls[google.maps.ControlPosition.TOP_LEFT].push(submitButton);
    map.controls[google.maps.ControlPosition.LEFT_TOP].push(responseDiv);
    marker = new google.maps.Marker({
    map,
    });
    map.addListener("click", (e) => {
    geocode({ location: e.latLng });
    });
    submitButton.addEventListener("click", () =>
    geocode({ address: inputText.value })
    );
    clear();
}

function clear() {
    marker.setMap(null);
}

function geocode(request) {
    clear();
    geocoder
    .geocode(request)
    .then((result) => {
        const { results } = result;

        map.setCenter(results[0].geometry.location);
        marker.setPosition(results[0].geometry.location);
        marker.setMap(map);
        response.innerText = JSON.stringify(result, null, 2);
        return results;
    })
    .catch((e) => {alert("No address found");});
}

window.initMap = initMap;
</script>
<style>
    #map {height: 100%;}
    input[type="text"] {
    background-color: #fff;
    border: 0;
    border-radius: 2px;
    box-shadow: 0 1px 4px -1px rgba(0, 0, 0, 0.3);
    margin: 10px;
    padding: 0 0.5em;
    font: 400 18px Roboto, Arial, sans-serif;
    overflow: hidden;
    line-height: 40px;
    margin-right: 0;
    min-width: 25%;
    }
    input[type="button"] {
    background-color: #fff;
    border: 0;
    border-radius: 2px;
    box-shadow: 0 1px 4px -1px rgba(0, 0, 0, 0.3);
    margin: 10px;
    padding: 0 0.5em;
    font: 400 18px Roboto, Arial, sans-serif;
    overflow: hidden;
    height: 40px;
    cursor: pointer;
    margin-left: 5px;
    }
    input[type="button"]:hover {background: rgb(235, 235, 235);}
    input[type="button"].button-primary {
    background-color: #1a73e8;
    color: white;
    }
    input[type="button"].button-primary:hover {background-color: #1765cc;}
    input[type="button"].button-secondary {
    background-color: white;
    color: #1a73e8;
    }
    input[type="button"].button-secondary:hover {background-color: #d2e3fc;}
</style>
{# endblock map #}
{% endblock %}

{% block body %}
<div class="container">
    <h1 class='text-center'>Professional Registration</h1>

    {% if form_errors(form) %}
    <div class="alert alert-danger">
        {{ form_errors(form) }}
    </div>
    {% endif %}
    <div class="row">
        <div class="col-md-6 offset-md-3 relative">
            {{ form_start(form, {'attr': {'class': 'needs-validation', 'novalidate': 'novalidate'}}) }}
            {{ form_row(form.first_name, {'attr': {'class': 'form-control mb-3', 'placeholder': 'First Name'}}) }}
            {{ form_row(form.last_name, {'attr': {'class': 'form-control mb-3', 'placeholder': 'Last Name'}}) }}
            {{ form_row(form.email, {'attr': {'class': 'form-control mb-3', 'placeholder': 'Email'}}) }}
            {{ form_row(form.picture, {'attr': {'class': 'form-control mb-3'}}) }}
            {{ form_row(form.password, {'attr': {'class': 'form-control mb-3', 'placeholder': 'Password'}}) }}
            {{ form_row(form.description, {'attr': {'class': 'form-control mb-3', 'rows': '4', 'placeholder': 'Description'}}) }}
            {{ form_row(form.specialization, {'label_attr': {'class': 'd-block'}, 'attr': {'class': 'form-control mb-3', 'style': 'height: 200px; display: inline-block; vertical-align: top;'}}) }}
            {{ form_row(form.other_specialization_checkbox) }}
            {{ form_row(form.other_specialization) }}
            {{ form_row(form.online_availability) }}
            {{ form_row(form.location, {'id': 'location_input', 'attr': {'style': 'display: none;'}}) }}
            <p id='address'>Enter or pick your location</p>
            <div id="map" style='height:350px; border-radius:0.5em'></div>
            <div class='absolute right-[10px]'>
                {{ form_row(form.irl_availability) }}
            </div>
            <div class='mb-6'></div>
            {{ form_row(form.video, {'attr': {'class': 'w-full'}})  }}
            {{ form_row(form._token) }}
            <div class='text-right mr-4'>
                {{ form_row(form.save, {'attr': {'class': 'btn bg-indigo-600 hover:bg-indigo-700 text-slate-200 hover:text-slate-200'}}) }}
            </div>
            {{ form_end(form) }}
        </div>
    </div>
</div>

{% endblock %}


{% block js %}
<script>
//Add a specialization only for current registering Professional
document.addEventListener('DOMContentLoaded', function () {
    var otherSpecializationCheckbox = document.querySelector('.other-specialization-checkbox');
    var otherSpecializationField = document.querySelector('.other-specialization-field');

    otherSpecializationCheckbox.addEventListener('change', function () {
        if (otherSpecializationCheckbox.checked) {
            otherSpecializationField.style.display = 'inline';
        } else {
            otherSpecializationField.style.display = 'none';
            otherSpecializationField.value = null;
        }
    });
});
</script>

{# Gives the array (latitude, longitude,address) of the location #}
<script src="https://maps.googleapis.com/maps/api/js?key={{ googleMapsApiKey }}&callback=initMap&v=weekly&solution_channel=GMP_CCS_geocodingservice_v1" async defer></script>
<script>
window.addEventListener("load", function() {

    let irl_availability = document.querySelector('.irl_availability-checkbox')
    let irl_availability_label = document.querySelector('#irl_availability_label')
    let map = document.querySelector('#map')
    const addressParagraphe = document.querySelector('#address')
    const locationInput = document.querySelector('#location_input');

    irl_availability.addEventListener('change', () =>{
        locationInput.value = []
        if(!irl_availability.checked){
            map.style.display = 'none'
            addressParagraphe.style.display = 'none'
            irl_availability_label.textContent = 'Check to share your professional place '
            irl_availability_label.style.color = 'green'
        }
        else{
            irl_availability_label.textContent = 'Uncheck if no place '
            map.style.display = 'block'
            addressParagraphe.textContent = 'Enter or pick your location'
            addressParagraphe.classList.remove('text-green-600')
            addressParagraphe.style.display = 'block'
            irl_availability_label.style.color = 'orange'
        }
    })

    const checkForResponseElement = setInterval(function() {
        const responseElement = document.querySelector("#response");
        if (responseElement) {
            let jsonLocationResponse  = document.querySelector("#response-container")
            jsonLocationResponse.style.zIndex = -1
            clearInterval(checkForResponseElement);

            const observer = new MutationObserver(function(mutations) {
                mutations.forEach(function(mutation) {
                    if (mutation.type === "childList") {
                        const response = JSON.parse(jsonLocationResponse.textContent);
                        
                        const latitude = response.results[0].geometry.location.lat;
                        const longitude = response.results[0].geometry.location.lng;
                        const address = response.results[0].formatted_address;
                        
                        addressParagraphe.classList.add('text-green-600')
                        addressParagraphe.textContent = 'Address: ' + address
                        
                        const locationArray = [
                            {name: 'Latitude', value: latitude},
                            {name: 'Longitude', value: longitude},
                            {name: 'Address', value: address}
                        ];
                        const locationJSON = JSON.stringify(locationArray);
                        locationInput.value = locationJSON;
                    }
                });
            });

            const observerConfig = { childList: true };

            observer.observe(responseElement, observerConfig);
        }
    }, 1000);
});
</script>
{% endblock %}
